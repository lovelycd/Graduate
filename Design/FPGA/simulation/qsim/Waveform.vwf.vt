// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/22/2021 11:02:14"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Design_Of_Graduation
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Design_Of_Graduation_vlg_vec_tst();
// constants                                           
// general purpose registers
reg En_Key;
reg [15:0] Key_input;
reg [15:0] Logic_input;
// wires                                               
wire [15:0] Rea_input;

// assign statements (if any)                          
Design_Of_Graduation i1 (
// port map - connection between master ports and signals/registers   
	.En_Key(En_Key),
	.Key_input(Key_input),
	.Logic_input(Logic_input),
	.Rea_input(Rea_input)
);
initial 
begin 
#10000000 $finish;
end 

// En_Key
initial
begin
	En_Key = 1'b0;
	En_Key = #640000 1'b1;
	En_Key = #4000000 1'b0;
end 
// Key_input[ 15 ]
initial
begin
	Key_input[15] = 1'b0;
	Key_input[15] = #880000 1'b1;
	Key_input[15] = #160000 1'b0;
end 
// Key_input[ 14 ]
initial
begin
	Key_input[14] = 1'b0;
	Key_input[14] = #5440000 1'b1;
	Key_input[14] = #240000 1'b0;
end 
// Key_input[ 13 ]
initial
begin
	Key_input[13] = 1'b0;
	Key_input[13] = #5440000 1'b1;
	Key_input[13] = #240000 1'b0;
end 
// Key_input[ 12 ]
initial
begin
	Key_input[12] = 1'b0;
	Key_input[12] = #1600000 1'b1;
	Key_input[12] = #240000 1'b0;
	Key_input[12] = #3600000 1'b1;
	Key_input[12] = #240000 1'b0;
end 
// Key_input[ 11 ]
initial
begin
	Key_input[11] = 1'b0;
	Key_input[11] = #1600000 1'b1;
	Key_input[11] = #240000 1'b0;
	Key_input[11] = #4400000 1'b1;
	Key_input[11] = #160000 1'b0;
end 
// Key_input[ 10 ]
initial
begin
	Key_input[10] = 1'b0;
	Key_input[10] = #6240000 1'b1;
	Key_input[10] = #160000 1'b0;
end 
// Key_input[ 9 ]
initial
begin
	Key_input[9] = 1'b0;
	Key_input[9] = #6240000 1'b1;
	Key_input[9] = #160000 1'b0;
end 
// Key_input[ 8 ]
initial
begin
	Key_input[8] = 1'b0;
	Key_input[8] = #2080000 1'b1;
	Key_input[8] = #240000 1'b0;
	Key_input[8] = #3920000 1'b1;
	Key_input[8] = #160000 1'b0;
end 
// Key_input[ 7 ]
initial
begin
	Key_input[7] = 1'b0;
	Key_input[7] = #2080000 1'b1;
	Key_input[7] = #240000 1'b0;
end 
// Key_input[ 6 ]
initial
begin
	Key_input[6] = 1'b0;
	Key_input[6] = #2080000 1'b1;
	Key_input[6] = #240000 1'b0;
end 
// Key_input[ 5 ]
initial
begin
	Key_input[5] = 1'b0;
end 
// Key_input[ 4 ]
initial
begin
	Key_input[4] = 1'b0;
end 
// Key_input[ 3 ]
initial
begin
	Key_input[3] = 1'b0;
end 
// Key_input[ 2 ]
initial
begin
	Key_input[2] = 1'b0;
end 
// Key_input[ 1 ]
initial
begin
	Key_input[1] = 1'b0;
end 
// Key_input[ 0 ]
initial
begin
	Key_input[0] = 1'b0;
end 
// Logic_input[ 15 ]
initial
begin
	Logic_input[15] = 1'b0;
end 
// Logic_input[ 14 ]
initial
begin
	Logic_input[14] = 1'b0;
end 
// Logic_input[ 13 ]
initial
begin
	Logic_input[13] = 1'b0;
end 
// Logic_input[ 12 ]
initial
begin
	Logic_input[12] = 1'b0;
end 
// Logic_input[ 11 ]
initial
begin
	Logic_input[11] = 1'b0;
	Logic_input[11] = #5760000 1'b1;
	Logic_input[11] = #320000 1'b0;
end 
// Logic_input[ 10 ]
initial
begin
	Logic_input[10] = 1'b0;
	Logic_input[10] = #5760000 1'b1;
	Logic_input[10] = #320000 1'b0;
end 
// Logic_input[ 9 ]
initial
begin
	Logic_input[9] = 1'b0;
	Logic_input[9] = #5760000 1'b1;
	Logic_input[9] = #320000 1'b0;
	Logic_input[9] = #1200000 1'b1;
	Logic_input[9] = #320000 1'b0;
end 
// Logic_input[ 8 ]
initial
begin
	Logic_input[8] = 1'b0;
	Logic_input[8] = #5760000 1'b1;
	Logic_input[8] = #320000 1'b0;
	Logic_input[8] = #1200000 1'b1;
	Logic_input[8] = #320000 1'b0;
end 
// Logic_input[ 7 ]
initial
begin
	Logic_input[7] = 1'b0;
	Logic_input[7] = #5760000 1'b1;
	Logic_input[7] = #320000 1'b0;
	Logic_input[7] = #1200000 1'b1;
	Logic_input[7] = #320000 1'b0;
	Logic_input[7] = #560000 1'b1;
	Logic_input[7] = #240000 1'b0;
end 
// Logic_input[ 6 ]
initial
begin
	Logic_input[6] = 1'b0;
	Logic_input[6] = #7280000 1'b1;
	Logic_input[6] = #320000 1'b0;
	Logic_input[6] = #560000 1'b1;
	Logic_input[6] = #240000 1'b0;
end 
// Logic_input[ 5 ]
initial
begin
	Logic_input[5] = 1'b0;
	Logic_input[5] = #8160000 1'b1;
	Logic_input[5] = #240000 1'b0;
end 
// Logic_input[ 4 ]
initial
begin
	Logic_input[4] = 1'b0;
	Logic_input[4] = #8160000 1'b1;
	Logic_input[4] = #240000 1'b0;
end 
// Logic_input[ 3 ]
initial
begin
	Logic_input[3] = 1'b0;
end 
// Logic_input[ 2 ]
initial
begin
	Logic_input[2] = 1'b0;
end 
// Logic_input[ 1 ]
initial
begin
	Logic_input[1] = 1'b0;
end 
// Logic_input[ 0 ]
initial
begin
	Logic_input[0] = 1'b0;
end 
endmodule

