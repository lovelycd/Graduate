// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/16/2021 22:32:39"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Design_Of_Graduation
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Design_Of_Graduation_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] select;
// wires                                               
wire En_11;
wire En_12;
wire En_13;
wire En_14;
wire En_15;
wire En_21;
wire En_22;
wire En_23;
wire En_24;
wire En_25;
wire En_26;
wire En_27;
wire En_28;
wire En_29;
wire En_31;
wire En_32;
wire En_33;
wire En_34;
wire En_35;
wire En_36;
wire En_41;
wire En_42;
wire En_43;
wire En_44;
wire En_45;
wire En_46;

// assign statements (if any)                          
Design_Of_Graduation i1 (
// port map - connection between master ports and signals/registers   
	.En_11(En_11),
	.En_12(En_12),
	.En_13(En_13),
	.En_14(En_14),
	.En_15(En_15),
	.En_21(En_21),
	.En_22(En_22),
	.En_23(En_23),
	.En_24(En_24),
	.En_25(En_25),
	.En_26(En_26),
	.En_27(En_27),
	.En_28(En_28),
	.En_29(En_29),
	.En_31(En_31),
	.En_32(En_32),
	.En_33(En_33),
	.En_34(En_34),
	.En_35(En_35),
	.En_36(En_36),
	.En_41(En_41),
	.En_42(En_42),
	.En_43(En_43),
	.En_44(En_44),
	.En_45(En_45),
	.En_46(En_46),
	.select(select)
);
initial 
begin 
#10000000 $finish;
end 
// select[ 7 ]
initial
begin
	repeat(7)
	begin
		select[7] = 1'b0;
		select[7] = #640000 1'b1;
		# 640000;
	end
	select[7] = 1'b0;
	select[7] = #640000 1'b1;
end 
// select[ 6 ]
initial
begin
	repeat(15)
	begin
		select[6] = 1'b0;
		select[6] = #320000 1'b1;
		# 320000;
	end
	select[6] = 1'b0;
	select[6] = #320000 1'b1;
end 
// select[ 5 ]
initial
begin
	repeat(31)
	begin
		select[5] = 1'b0;
		select[5] = #160000 1'b1;
		# 160000;
	end
	select[5] = 1'b0;
end 
// select[ 4 ]
initial
begin
	repeat(62)
	begin
		select[4] = 1'b0;
		select[4] = #80000 1'b1;
		# 80000;
	end
	select[4] = 1'b0;
end 
// select[ 3 ]
always
begin
	select[3] = 1'b0;
	select[3] = #40000 1'b1;
	#40000;
end 
// select[ 2 ]
always
begin
	select[2] = 1'b0;
	select[2] = #20000 1'b1;
	#20000;
end 
// select[ 1 ]
always
begin
	select[1] = 1'b0;
	select[1] = #10000 1'b1;
	#10000;
end 
// select[ 0 ]
always
begin
	select[0] = 1'b0;
	select[0] = #5000 1'b1;
	#5000;
end 
endmodule

